1. Overview of the Project:
My main goal of the swarm robot system is to develop my own custom GUI to handle swarm missions and Swarm Robots can do the missions based on their locations and their distance between them. Primary Goal is to make Square, Rectangle, Triangle, Circle Shapes using 5 drones.
and Secondary goal is that drone can pick up the ball and place it into the cart.
2. Hardware Components:
A) In the Drone :
I.) Flight Controller : SpeedyBee F405 V4 flight controller, i'm using Ardupilot in it. get the Mavlink Commands. I've connected Radiolink TS100 v2 M10 GPS to it.
II.) Rapberry Pi Zero 2 W: Connected to speedybee on serial UART. Processes, computes and sends commands to flight controller.
from dronekit import connect, VehicleMode, LocationGlobalRelative
from pymavlink import mavutil
import time
import geopy
import geopy.distance
from geopy.distance import great_circle
import math

class DroneVehicle:
    def __init__(self, connection_string, baud=None):
        self.vehicle = connect(connection_string, baud=baud)
        self.posalt = 2
        self.in_air = False
        
    def disconnect(self):
        self.vehicle.close()
        self.vehicle = None
        time.sleep(2)
        print("Disconnected Successfully")

    def arm(self, mode='GUIDED'):
        """Arms the vehicle in specified mode"""
        print("Arming motors")
        self.vehicle.mode = VehicleMode(mode)
        self.vehicle.armed = True
        
        while not self.vehicle.armed:
            print("Waiting for arming...")
            self.vehicle.armed = True
            time.sleep(1)
        print("Vehicle Armed")

    def takeoff(self, alt=1):
        """Takes off to specified altitude"""
        self.arm()
        print("Taking off!")
        self.vehicle.simple_takeoff(alt)
        self.posalt = alt
        start_time = time.time()
        TIMEOUT_SECONDS = 15
        
        while True:
            current_altitude = self.vehicle.location.global_relative_frame.alt
            print(f" Altitude: {current_altitude}")
            if current_altitude >= alt * 0.95:
                print("Reached target altitude")
                break
            else:
                print("Waiting for altitude information...")
            if time.time() - start_time > TIMEOUT_SECONDS:
                break
            time.sleep(1)
        self.in_air = True

    def land(self):
        """Switches to LAND mode"""
        self.vehicle.mode = VehicleMode("LAND")
        print("Landing")
        self.in_air = False

    def rtl(self):
        """Return to launch"""
        self.vehicle.mode = VehicleMode("RTL")
        print("Returning to Launch")
        self.in_air = False

    def poshold(self):
        """Switches to POSHOLD mode"""
        self.vehicle.mode = VehicleMode("POSHOLD")
        print("Position Hold mode enabled")

    def disarm(self):
        try:
            print("Disarming motors")
            self.vehicle.armed = False

            while self.vehicle.armed:
                print("Waiting for disarming...")
                self.vehicle.armed = False
                time.sleep(1)

            print("Vehicle Disarmed")
        except Exception as e:
            print(f"Error during disarming: {e}")

    def get_location(self):
        """Returns current location and heading"""
        lat = self.vehicle.location.global_relative_frame.lat
        lon = self.vehicle.location.global_relative_frame.lon
        heading = self.vehicle.heading
        return (lat, lon), heading

    def goto(self, location, alt, groundspeed=0.7):
        """Goes to specified GPS location and altitude"""
        destination = LocationGlobalRelative(location[0], location[1], alt)
        
        current_lat = self.vehicle.location.global_relative_frame.lat
        current_lon = self.vehicle.location.global_relative_frame.lon
        current_alt = self.vehicle.location.global_relative_frame.alt
        
        while ((self.distance_between_points((current_lat, current_lon), location) > 0.5) or 
               (abs(current_alt - alt) > 0.3)):
            self.vehicle.simple_goto(destination, groundspeed=groundspeed)
            time.sleep(0.5)
            current_lat = self.vehicle.location.global_relative_frame.lat
            current_lon = self.vehicle.location.global_relative_frame.lon
            current_alt = self.vehicle.location.global_relative_frame.alt

    def send_ned_velocity_drone(self, velocity_x, velocity_y, velocity_z):
        try:
            velocity_x = float(velocity_x)
            velocity_y = float(velocity_y)
            velocity_z = float(velocity_z)
            

            msg = self.vehicle.message_factory.set_position_target_local_ned_encode(
                0,  # time_boot_ms (not used)
                0, 0,  # target system, target component
                mavutil.mavlink.MAV_FRAME_LOCAL_NED,  # frame
                0b0000111111000111,  # type_mask (only speeds enabled)
                0, 0, 0,  # x, y, z positions (not used)
                velocity_x, velocity_y, velocity_z,  # x, y, z velocity in m/s
                0, 0, 0,  # x, y, z acceleration (not supported yet, ignored in GCS_Mavlink)
                0, 0)  # yaw, yaw_rate (not supported yet, ignored in GCS_Mavlink)

            self.vehicle.send_mavlink(msg)
            print("Drone Velocity : {}, {}, {}".format(velocity_x,velocity_y,velocity_z))

        except Exception as e:
            print(f"Error sending velocity commands: {e}")
            
    def send_ned_velocity(self, x, y, z, duration = None):
        self.no_vel_cmds = False
        if duration:
            for i in range(0,duration):
                self.send_ned_velocity_drone(x,y,z)
                print(i)
                time.sleep(1)

            self.send_ned_velocity_drone(0,0,0)
            time.sleep(1)
            self.no_vel_cmds = True
            
        else:
            self.send_ned_velocity_drone(x,y,z)

    def yaw(self, heading, relative=False):
        """
        Rotate vehicle to specified heading
        heading: degrees (0 is North)
        relative: if True, heading is relative to current heading
        """
        if relative:
            is_relative = 1
        else:
            is_relative = 0
            
        msg = self.vehicle.message_factory.command_long_encode(
            0, 0,    # target system, target component
            mavutil.mavlink.MAV_CMD_CONDITION_YAW, # command
            0,       # confirmation
            heading, # param 1, yaw in degrees
            0,       # param 2, yaw speed deg/s
            1,       # param 3, direction -1 ccw, 1 cw
            is_relative, # param 4, relative offset 1, absolute angle 0
            0, 0, 0) # param 5 ~ 7 not used
        
        self.vehicle.send_mavlink(msg)

    def get_vehicle_state(self):
        """Returns comprehensive vehicle state information"""
        return {
            'location': {
                'global': (self.vehicle.location.global_frame.lat,
                          self.vehicle.location.global_frame.lon,
                          self.vehicle.location.global_frame.alt),
                'relative': (self.vehicle.location.global_relative_frame.lat,
                           self.vehicle.location.global_relative_frame.lon,
                           self.vehicle.location.global_relative_frame.alt),
                'local': (self.vehicle.location.local_frame.north,
                         self.vehicle.location.local_frame.east,
                         self.vehicle.location.local_frame.down)
            },
            'velocity': self.vehicle.velocity,
            'gps': {
                'fix_type': self.vehicle.gps_0.fix_type,
                'satellites_visible': self.vehicle.gps_0.satellites_visible
            },
            'battery': {
                'voltage': self.vehicle.battery.voltage,
                'current': self.vehicle.battery.current,
                'level': self.vehicle.battery.level
            },
            'heading': self.vehicle.heading,
            'groundspeed': self.vehicle.groundspeed,
            'airspeed': self.vehicle.airspeed,
            'mode': self.vehicle.mode.name
        }

    def set_mode(self, mode_name):
        """Changes vehicle mode"""
        self.vehicle.mode = VehicleMode(mode_name)
        print(f"Mode changed to {mode_name}")

    def close_vehicle(self):
        """Closes vehicle connection"""
        self.vehicle.close()

    @staticmethod
    def distance_between_points(point1, point2):
        """Calculate distance between two GPS points"""
        return great_circle(point1, point2).meters

    @staticmethod
    def new_location(original_location, distance, bearing):
        """
        Calculate new location given distance and bearing from original location
        distance: in meters
        bearing: in degrees (0 is North)
        """
        vincentyDistance = geopy.distance.distance(meters=distance)
        original_point = geopy.Point(original_location[0], original_location[1])
        new_location = vincentyDistance.destination(point=original_point, bearing=bearing)
        
        return (round(new_location.latitude, 7), round(new_location.longitude, 7)) 
these are some commands i'm currently using and are working properly. But these are just naive, and i want to go too much deep. It requests and sets params directly to flight controller.

III.)ESP32 : ESP NOW Communication protocol. it will send character or strings, predefined as custom protocol. used for long range with antenna and connected with raspberry pi zero 2 w to increase the communication range and speed. one ESP32 is also connected to GCS (MY LAPTOP) which does the same, send commands to set params, get params, send commands, receive info, etc to rapsberry pi zero 2 w.

IV.) UWB DWB1000 : Will be connected with every drone and GCS to continuosly measue distance between all the drones and GCS.

B) In the GCS:
GCS: My laptop. i've connected on esp32 and UWB to it as discussed before. Laptop is running HTML, CSS, JS(FUNCTIONS,MAP) , ELECTRON, PYTHON ( HTTPs, SUBPROCESS for electron, PYSERIAL). 

3. Communication Protocol :
ESP-NOW and MAVLink protocols
So basically GCS sends commands through esp32 to raspberry pi using esp now protocol. So actually, GCS sends Data through serial to ESP_GCS then ESP_GCS sends through esp_now to ESP_MCU and then ESP_MCU sends data through serial to Raspberry pi then Raspberry Pi process that command and execute it and controls Flight Controller.

4. Software Components :
My GUI has ARM, TAKEOFF, Change Mode, Functions. It can get parameters and utilize it to show Drone's Attitude, Altitude, location etc. I want to add a Drone Settings tab where i can set Params and Get Params, I want to add Mission Planning, where i can set drones, their distances and can also visualize them live.
I'm using Dronkit on Rapsberry pi zero. it is also using mavlink, i already gave you the code above.
There can be Autonomous system like Drones should not get near to each other, using UWB. Leader MCU Drone should handle all the shape formation while GCS only tells leader drone its location. Thinking of an AI, i would add ball detection and auto ball pickup in future. but i'll do all the processes on the laptop, not on the raspberry pi. raspberry pi will only send camera footage to my laptop, and my laptop will handle whole image processing and send commands to the drone how and where it should go.

5.) Drone Control and Missions :
To perform various shapes, i'll set Leader Drone's Location then Leader Drone will contact with all the other drones, Get their locations and set their go to locations. Leader drone can also set their heading. and that's how the Mission will be performed.
Well mission will be written on GCS, so i'll set the drone's position not their locations. and then Leader drone will autonomously select their global position to be.
Alll the drones will maintain their given altitude using Baro, lat, lon using GPS and their distance using UWB.

For synchronization, i'm using ESP NOW Protocol because it is fast and long range. For Collision Avoidance, i'm using UWB. which measures distance between two modules. They will alternatively change from Anchor to Tag and Tag to Anchor and will know all the possible locations. it will literally help them to maintain their position precisely.

For controlling individual drone, i'll control them using Keyboard while entire swarm will be using Mission form GCS. GCS is my custom so i'll be making it, depending on the protocol we use.

6.) Current Progress: 
Currently I have MCU only. I'm flying it and Testing with old gui which can control it and Arm, Takeoff, Mode change etc.
New GUI which is made on HTML, CSS, JS, Python is having some frontend and backend issues yet. i'm literally on first stage.

7.) Current Issues: 
Lack of Understanding of Connection and Communication Protocol. Also Lacking of Better GUI.

8.) Future Goals:
Already Described above.
